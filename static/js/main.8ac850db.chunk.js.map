{"version":3,"sources":["components/GameStatus/index.js","components/Square/index.js","components/Board/index.js","components/StartScreen/allCharacters.js","components/PlayerInput/index.js","components/StartScreen/index.js","components/GoTo/index.js","components/Game/initial.js","components/Game/helper.js","components/Game/index.js","App.js","reportWebVitals.js","index.js"],"names":["GameStatus","status","className","Square","value","onSquareClick","isWinning","trim","onClick","disabled","Board","squares","winningCombinations","map","i","isWinningSquare","some","combination","includes","allCharacters","character","characterId","PlayerInput","playerNumber","availableCharacters","onPlayerUpdate","useState","name","player","setPlayer","handleChange","update","updatedPlayer","type","placeholder","onChange","e","target","defaultValue","style","visibility","StartScreen","onStartGame","player1","setPlayer1","player2","setPlayer2","userInputIsValid","filter","newPlayer","GoTo","gameIsOver","movesCount","currentMove","handleClick","Array","from","length","_","move","buttonText","classList","push","join","initialSquares","fill","initialHistory","calculateWinner","a","b","c","hasWon","Game","players","setPlayers","history","setHistory","xIsNext","setXIsNext","stepNumber","setStepNumber","isX","currentPlayer","nextPlayer","allSquaresClicked","every","square","step","console","log","indexClicked","truncatedHistory","slice","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ac850db.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./GameStatus.css\";\r\n\r\n/*\r\nProps:\r\n    Status: \r\n        Something like:\r\n            \"Next player: <player_character>\"\r\n            \"Game over! No winner!\"\r\n            \"<player_character> wins!\"\r\n*/\r\n\r\nexport function GameStatus({ status }) {\r\n  return (\r\n    <div className=\"game-status\">\r\n      <p className=\"font-spooky\">{status}</p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./Square.css\";\r\n\r\n/*\r\nProps:\r\n  value (either null, \"X\", \"O\"),\r\n  handleClick: for when someone clicks a \"square\"\r\n  isWinning: boolean\r\n*/\r\nexport function Square({ value, onSquareClick, isWinning }) {\r\n  return (\r\n    <button\r\n      className={`square ${isWinning ? \"winning-square\" : \"\"}`.trim()}\r\n      onClick={onSquareClick}\r\n      disabled={!!value}\r\n    >\r\n      <span>{value}</span>\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Square } from \"../Square\";\r\nimport \"./Board.css\";\r\n\r\n/*\r\nProps:\r\n  squares: array in which each value is either: null, \"X\", \"O\"\r\n  winningCombinations: array of arrays\r\n  handleClick: function\r\n*/\r\n\r\nexport function Board({ squares, onSquareClick, winningCombinations }) {\r\n  return (\r\n    <div className=\"board\">\r\n      {squares.map((value, i) => {\r\n        const isWinningSquare = winningCombinations.some((combination) =>\r\n          combination.includes(i)\r\n        );\r\n        return (\r\n          <Square\r\n            key={i}\r\n            value={value}\r\n            onSquareClick={() => onSquareClick(i)}\r\n            isWinning={isWinningSquare}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","export const allCharacters = [\r\n  \"🧟\",\r\n  \"☠️\",\r\n  \"⚰️\",\r\n  \"🎃\",\r\n  \"👻\",\r\n  \"👹\",\r\n  \"🤡\",\r\n  \"💀\",\r\n  \"👾\",\r\n  \"👺\",\r\n  \"👽\",\r\n  \"🧙\",\r\n  \"🧛\",\r\n  \"👸\",\r\n  \"🧡\",\r\n].map((character, i) => {\r\n  return {\r\n    character,\r\n    characterId: i,\r\n  };\r\n});\r\n","import React, { useState } from \"react\";\r\n\r\nimport \"./PlayerInput.css\";\r\n\r\nexport function PlayerInput({\r\n  playerNumber,\r\n  availableCharacters,\r\n  onPlayerUpdate,\r\n}) {\r\n  const [player, setPlayer] = useState({\r\n    name: \"\",\r\n    character: \"\",\r\n  });\r\n\r\n  function handleChange(update) {\r\n    const updatedPlayer = { ...player, ...update };\r\n    setPlayer(updatedPlayer);\r\n    onPlayerUpdate(updatedPlayer);\r\n  }\r\n\r\n  return (\r\n    <fieldset className=\"player-input-container flex-col-center\">\r\n      <legend className=\"player-input__legend glowing-text\">{`Player ${playerNumber}`}</legend>\r\n      <input\r\n        className=\"player-input__name font-spooky\"\r\n        type=\"text\"\r\n        placeholder={`Enter player ${playerNumber}'s name here...`}\r\n        onChange={(e) => handleChange({ name: e.target.value })}\r\n      />\r\n      {\r\n        <select\r\n          className=\"player-input__character font-spooky\"\r\n          defaultValue={player.character}\r\n          onChange={(e) => handleChange({ character: e.target.value })}\r\n          style={{ visibility: player.name ? \"visible\" : \"hidden\" }}\r\n        >\r\n          <option className=\"player-input__character-option\" disabled value=\"\">\r\n            {`Select a character for player ${playerNumber}`}\r\n          </option>\r\n          {availableCharacters.map(({ character, characterId }) => {\r\n            return (\r\n              <option\r\n                className=\"player-input__character-option\"\r\n                value={character}\r\n                key={characterId}\r\n              >\r\n                {character}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n      }\r\n    </fieldset>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport { allCharacters } from \"./allCharacters\";\r\nimport { PlayerInput } from \"../PlayerInput\";\r\nimport \"./StartScreen.css\";\r\n\r\nexport function StartScreen({ onStartGame }) {\r\n  const [player1, setPlayer1] = useState({\r\n    name: \"\",\r\n    character: \"\",\r\n  });\r\n  const [player2, setPlayer2] = useState({\r\n    name: \"\",\r\n    character: \"\",\r\n  });\r\n\r\n  const userInputIsValid =\r\n    player1.name && player1.character && player2.name && player2.character;\r\n\r\n  function handleClick() {\r\n    if (userInputIsValid) {\r\n      onStartGame(player1, player2);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"start-screen flex-col-center glowing-border font-spooky\">\r\n      <h1 className=\"glowing-text\">Select a character!</h1>\r\n      <main className=\"flex-row-center\">\r\n        <PlayerInput\r\n          playerNumber={1}\r\n          availableCharacters={allCharacters.filter(\r\n            ({ character }) => player2.character !== character\r\n          )}\r\n          onPlayerUpdate={(newPlayer) => setPlayer1(newPlayer)}\r\n        />\r\n        <PlayerInput\r\n          playerNumber={2}\r\n          availableCharacters={allCharacters.filter(\r\n            ({ character }) => player1.character !== character\r\n          )}\r\n          onPlayerUpdate={(newPlayer) => setPlayer2(newPlayer)}\r\n        />\r\n      </main>\r\n      {\r\n        <button\r\n          className=\"btn font-spooky glowing-font\"\r\n          onClick={handleClick}\r\n          style={{ visibility: userInputIsValid ? \"visible\" : \"hidden\" }}\r\n        >\r\n          Start game\r\n        </button>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./GoTo.css\";\r\n\r\nexport function GoTo({ gameIsOver, movesCount, currentMove, handleClick }) {\r\n  return (\r\n    <div className=\"go-to-move-container font-spooky\">\r\n      <span className=\"go-to-move__label glowing-text\">Go back?</span>\r\n      {Array.from({ length: movesCount }, (_, move) => {\r\n        const classList = [\"go-to-move__move\"];\r\n        if (move < currentMove) {\r\n          classList.push(\"go-to-move__to-keep\");\r\n        } else if (move > currentMove) {\r\n          classList.push(\"go-to-move__to-drop\");\r\n        } else {\r\n          classList.push(\"go-to-move__to-keep\", \"go-to-move__current\");\r\n        }\r\n\r\n        let buttonText;\r\n        if (move > 0) {\r\n          if (!gameIsOver || move < movesCount - 1) {\r\n            buttonText = move;\r\n          } else {\r\n            buttonText = \"End\";\r\n          }\r\n        } else {\r\n          buttonText = \"Start\";\r\n        }\r\n\r\n        if (move > 0) {\r\n        }\r\n        return (\r\n          <button\r\n            key={move}\r\n            className={classList.join(\" \")}\r\n            onClick={() => handleClick(move)}\r\n          >\r\n            {buttonText}\r\n          </button>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","export const initialSquares = Array(9).fill(null);\r\nexport const initialXIsNext = false;\r\nexport const initialHistory = [{ squares: initialSquares }];\r\n\r\nexport const initialPlayers = [\r\n  { name: \"Bob\", character: \"🧟\", isX: false },\r\n  { name: \"Todd\", character: \"☠️\", isX: true },\r\n];\r\n","export const calculateWinner = (squares) => {\r\n  const combinationsToCheck = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\n  const winningCombinations = combinationsToCheck.filter(\r\n    ([a, b, c]) =>\r\n      squares[a] && squares[a] === squares[b] && squares[a] === squares[c]\r\n  );\r\n\r\n  return {\r\n    hasWon: winningCombinations.length > 0,\r\n    winningCombinations,\r\n  };\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport \"./Game.css\";\r\n\r\nimport { GameStatus } from \"../GameStatus\";\r\nimport { Board } from \"../Board\";\r\nimport { StartScreen } from \"../StartScreen\";\r\nimport { GoTo } from \"../GoTo\";\r\nimport { initialPlayers, initialHistory, initialXIsNext } from \"./initial\";\r\nimport { calculateWinner } from \"./helper\";\r\n\r\n/*\r\nState:\r\n  players: []\r\n  history: [{squares, xIsNext}, ...]\r\n  current: {squares, xIsNext}\r\n  \r\nBehaviour:\r\n  set xIsNext\r\n  set square state (when square gets clicked)\r\n*/\r\n\r\nexport function Game() {\r\n  const [players, setPlayers] = useState([]);\r\n  const [history, setHistory] = useState(initialHistory);\r\n  const [xIsNext, setXIsNext] = useState(initialXIsNext);\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n\r\n  function handleStartGame(player1, player2) {\r\n    setPlayers([\r\n      { ...player1, isX: false },\r\n      { ...player2, isX: true },\r\n    ]);\r\n  }\r\n\r\n  if (0 === players.length) {\r\n    return <StartScreen onStartGame={handleStartGame} />;\r\n  }\r\n\r\n  function onSquareClick(indexClicked) {\r\n    if (gameIsOver) {\r\n      return;\r\n    }\r\n    const { squares } = history[stepNumber];\r\n    const truncatedHistory = history.slice(0, stepNumber + 1);\r\n\r\n    if (squares[indexClicked] || calculateWinner(squares).hasWon) {\r\n      return;\r\n    }\r\n\r\n    setHistory([\r\n      // Create deep, imperative copy of existing history\r\n      ...truncatedHistory.map((step) => {\r\n        return { squares: [...step.squares] };\r\n      }),\r\n\r\n      // New step in history\r\n      {\r\n        squares: [\r\n          ...squares.slice(0, indexClicked),\r\n          players[xIsNext ? 1 : 0].character,\r\n          ...squares.slice(indexClicked + 1),\r\n        ],\r\n      },\r\n    ]);\r\n    setStepNumber(truncatedHistory.length);\r\n    setXIsNext(!xIsNext);\r\n  }\r\n\r\n  function jumpTo(step) {\r\n    console.log(\"Set step number to\", step);\r\n    setStepNumber(step);\r\n    setXIsNext(0 !== step % 2);\r\n  }\r\n\r\n  function restartGame() {\r\n    setHistory(initialHistory);\r\n    setStepNumber(0);\r\n    setXIsNext(initialXIsNext);\r\n  }\r\n\r\n  const { squares } = history[stepNumber];\r\n  const currentPlayer = players[xIsNext ? 1 : 0];\r\n  const nextPlayer = players[xIsNext ? 0 : 1];\r\n  const allSquaresClicked = squares.every((square) => square);\r\n  const { hasWon, winningCombinations } = calculateWinner(squares);\r\n  const gameIsOver = hasWon || allSquaresClicked;\r\n\r\n  let status;\r\n  if (hasWon) {\r\n    status = `${nextPlayer.name} ${nextPlayer.character} wins!`;\r\n  } else if (allSquaresClicked) {\r\n    status = \"Game over! No winner!\";\r\n  } else {\r\n    status = `Waiting for ${currentPlayer.name} ${currentPlayer.character}...`;\r\n  }\r\n\r\n  return (\r\n    <div className=\"game flex-col-center\">\r\n      <GoTo\r\n        gameIsOver={\r\n          history[history.length - 1].squares.every((square) => square) ||\r\n          calculateWinner(history[history.length - 1].squares).hasWon\r\n        }\r\n        movesCount={history.length}\r\n        currentMove={stepNumber}\r\n        handleClick={jumpTo}\r\n      />\r\n      <GameStatus status={status} />\r\n      <Board\r\n        squares={squares}\r\n        onSquareClick={onSquareClick}\r\n        winningCombinations={winningCombinations}\r\n      />\r\n      <button\r\n        className=\"btn font-spooky\"\r\n        onClick={restartGame}\r\n        style={{\r\n          visibility: gameIsOver ? \"visible\" : \"hidden\",\r\n        }}\r\n      >\r\n        Play again\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport { Game } from \"./components/Game\";\nimport React from \"react\";\n\nfunction App() {\n  return (\n    <div className=\"app flex-col-center\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}